<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">
    <!--web.xml节点加载顺序：节点的加载顺序与它们在 web.xml 文件中的先后顺序无关。
    加载顺序为：context-param -> listener -> filter -> servlet-->

    <!--1、启动 Spring 的 IOC 容器-->
    <!-- needed for ContextLoaderListener -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml</param-value>
    </context-param>

    <!--Spring 中配置log4j日志功能：
        ①log4jConfigLocation 指定Spring从哪个目录下加载 log4j.properties 配置文件
        ②log4jRefreshInterval 当修改了配置文件时，不需要重启就能加载变化了的log4j.properties 配置文件
        ③webAppRootKey 项目的标识，一个窗口中可能部署了多个项目，用它进行区分。当配置日志文件的输出目录时，可能会用到它-->
    <!-- 加载log4j的配置文件log4j.properties -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:log4j.properties</param-value>
    </context-param>
    <!-- 设定刷新日志配置文件的时间间隔，这里设置为10s -->
    <context-param>
        <param-name>log4jRefreshInterval</param-name>
        <param-value>10000</param-value>
    </context-param>
    <!-- 为避免项目间冲突，定义唯一的 webAppRootKey -->
    <!--注意WebUtils的webAppRootKey参数默认值是webapp.root-->
    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>program.root</param-value>
    </context-param>
    <!-- 加载Spring框架中的log4j监听器Log4jConfigListener -->
    <!--发现Log4jConfigListener已过期，Spring建议用log4j2 来替换这个类-->
    <!--注意ContextListener需要在Log4jConfigListener之后-->
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>

    <!-- Bootstraps the root web application context before servlet initialization -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!--2、springmvc 的前端控制器 DispatcherServlet，拦截所有请求  -->
    <servlet>
        <servlet-name>dispatcherServlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!--通过 contextConfigLocation 初始化参数 自定义 配置文件的位置和名称。
            也可以不采用 contextConfigLocation来配置 SpringMVC 的配置文件，而采用默认的。
            默认的配置文件为：/WEB-INF/<servletName-servlet>.xml，如：dispatcherServlet-servlet.xml
            -->
       <!-- <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>-->
        <load-on-startup>1</load-on-startup><!--在当前web应用被加载时创建，而不是第一次请求时创建-->
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcherServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!--3、字符编码过滤器，一定要放在所有过滤器之前 -->
    <filter>
        <filter-name>CharacterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CharacterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern><!--拦截所有请求-->
    </filter-mapping>

    <!--4、HiddenHttpMethodFilter 过滤器使用Rest风格的URI，将页面普通的post请求转为指定的delete或者put请求-->
    <filter>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!--HttpPutFormContentFilter 支持直接发送 PUT之类的请求，还要封装请求体中的数据-->
    <!--
    <filter>
        <filter-name>HttpPutFormContentFilter</filter-name>
        <filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>HttpPutFormContentFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>-->


    <!--指定错误处理页面，可以通过“异常类型”或“错误码”来指定错误处理页面。-->
    <error-page>
        <error-code>404</error-code><!--通过错误码来配置error-page，还可通过异常类型配置，如<exception-type>java.lang.NullException</exception-type>-->
        <location>/WEB-INF/error/404.jsp</location>
    </error-page>
</web-app>